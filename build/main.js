/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
__export(exports, {
  default: () => Musa
});
var import_obsidian = __toModule(require("obsidian"));

// src/utilities/logger.ts
function log(msg) {
  return __async(this, null, function* () {
    console.log("[MA] - " + msg);
  });
}

// src/main.ts
var Musa = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      log("Musa Apollonides Loaded");
      this.modifyFileEvent = this.app.vault.on("modify", (file) => this.fileModifiedEvent(file));
      this.modifyFileNameEvent = this.app.vault.on("rename", (file, oldPath) => this.fileNameChanged(file, oldPath));
      this.registerEvent(this.modifyFileEvent);
      this.registerEvent(this.modifyFileNameEvent);
    });
  }
  onunload() {
    log("Unloading Musa Apollonides");
    this.unload();
  }
  fileNameChanged(file, oldPath) {
    return __async(this, null, function* () {
      if (this.actionInProgress == true) {
        log("Action in progress, skipping");
        return;
      }
      ;
      log("File name changed, renaming title");
      this.startMusaActions();
      let stringFile = yield this.app.vault.read(file);
      let newTitle = file.basename.split("-").last().trim();
      let trueOldFileName = oldPath.split("/").last().split("-").last().replace(".md", "").trim();
      log(trueOldFileName);
      let pattern = "# " + trueOldFileName;
      let re = new RegExp(pattern);
      let newFile = stringFile.replace(re, "# " + newTitle);
      yield file.vault.modify(file, newFile);
      this.stopMusaActions();
    });
  }
  startMusaActions() {
    this.actionInProgress = true;
  }
  stopMusaActions() {
    this.actionInProgress = false;
  }
  getDate() {
    let dateObj = new Date();
    let days = ("0" + dateObj.getDate()).slice(-2);
    let month = ("0" + (dateObj.getMonth() + 1)).slice(-2);
    let year = dateObj.getFullYear();
    let hours = dateObj.getHours();
    let minutes = dateObj.getMinutes();
    let seconds = dateObj.getSeconds();
    let date = year + "-" + month + "-" + days + " " + hours + ":" + minutes + ":" + seconds;
    return date;
  }
  fileModifiedEvent(file) {
    return __async(this, null, function* () {
      if (this.actionInProgress == true) {
        log("Action in progress, skipping");
        return;
      }
      ;
      if (file.path.contains("04 - ")) {
        log("File is template, skipping file");
        return;
      }
      ;
      this.startMusaActions();
      let stringFile = yield this.app.vault.read(file);
      let trueFileName = file.path.split("/").last().split("-").last().replace(".md", "").trim();
      let fileTitle = stringFile.match("#{1} {1}.*").join("").slice(2);
      if (trueFileName != fileTitle) {
        let trueFilePath = file.path;
        let newFilePath = trueFilePath.replace(trueFileName, fileTitle);
        log("Title changed, renaming file");
        yield this.app.fileManager.renameFile(file, newFilePath);
      }
      log("Update modified date");
      let date = this.getDate();
      let modifiedS = "modified date: " + date;
      let re = new RegExp("(modified date.*)");
      let newFile = stringFile.replace(re, modifiedS);
      yield file.vault.modify(file, newFile);
      this.stopMusaActions();
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAic3JjL3V0aWxpdGllcy9sb2dnZXIudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IEFwcCwgRWRpdG9yLCBlZGl0b3JFZGl0b3JGaWVsZCwgRXZlbnRSZWYsIE1hcmtkb3duVmlldywgTWV0YWRhdGFDYWNoZSwgTW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nLCBUQWJzdHJhY3RGaWxlLCBURmlsZSwgVEZvbGRlciwgVmF1bHQgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IGxvZyB9IGZyb20gXCJ1dGlsaXRpZXMvbG9nZ2VyXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNdXNhIGV4dGVuZHMgUGx1Z2luIHtcclxuXHRwcml2YXRlIG1vZGlmeUZpbGVFdmVudDogRXZlbnRSZWY7XHJcblx0cHJpdmF0ZSBtb2RpZnlGaWxlTmFtZUV2ZW50OiBFdmVudFJlZjtcclxuXHRwcml2YXRlIGFjdGlvbkluUHJvZ3Jlc3MgOiBib29sZWFuO1xyXG5cdFxyXG5cdGFzeW5jIG9ubG9hZCgpIHtcclxuXHRcdGxvZyhcIk11c2EgQXBvbGxvbmlkZXMgTG9hZGVkXCIpO1xyXG5cdFx0dGhpcy5tb2RpZnlGaWxlRXZlbnQgPSB0aGlzLmFwcC52YXVsdC5vbihcIm1vZGlmeVwiLCAoZmlsZTogVEZpbGUpID0+IHRoaXMuZmlsZU1vZGlmaWVkRXZlbnQoZmlsZSkpO1xyXG5cdFx0dGhpcy5tb2RpZnlGaWxlTmFtZUV2ZW50ID0gdGhpcy5hcHAudmF1bHQub24oXCJyZW5hbWVcIiwgKGZpbGU6IFRGaWxlLCBvbGRQYXRoOiBzdHJpbmcpID0+IHRoaXMuZmlsZU5hbWVDaGFuZ2VkKGZpbGUsIG9sZFBhdGgpKTtcclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLm1vZGlmeUZpbGVFdmVudCk7XHJcblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQodGhpcy5tb2RpZnlGaWxlTmFtZUV2ZW50KTtcclxuXHRcdFxyXG5cdH1cclxuXHRvbnVubG9hZCgpOiB2b2lkIHtcclxuXHRcdGxvZyhcIlVubG9hZGluZyBNdXNhIEFwb2xsb25pZGVzXCIpO1xyXG5cdFx0dGhpcy51bmxvYWQoKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIGZpbGVOYW1lQ2hhbmdlZChmaWxlOiBURmlsZSwgb2xkUGF0aDogc3RyaW5nKSB7XHJcblx0XHRpZih0aGlzLmFjdGlvbkluUHJvZ3Jlc3MgPT0gdHJ1ZSkge1xyXG5cdFx0XHRsb2coXCJBY3Rpb24gaW4gcHJvZ3Jlc3MsIHNraXBwaW5nXCIpOyBcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fTtcclxuXHRcdGxvZyhcIkZpbGUgbmFtZSBjaGFuZ2VkLCByZW5hbWluZyB0aXRsZVwiKTtcclxuXHRcdHRoaXMuc3RhcnRNdXNhQWN0aW9ucygpO1xyXG5cdFx0bGV0IHN0cmluZ0ZpbGUgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5yZWFkKGZpbGUpO1xyXG5cdFx0bGV0IG5ld1RpdGxlID0gZmlsZS5iYXNlbmFtZS5zcGxpdChcIi1cIikubGFzdCgpLnRyaW0oKTtcclxuXHRcdGxldCB0cnVlT2xkRmlsZU5hbWUgPSBvbGRQYXRoLnNwbGl0KFwiL1wiKS5sYXN0KCkuc3BsaXQoXCItXCIpLmxhc3QoKS5yZXBsYWNlKFwiLm1kXCIsIFwiXCIpLnRyaW0oKTtcclxuXHRcdGxvZyh0cnVlT2xkRmlsZU5hbWUpO1xyXG5cdFx0bGV0IHBhdHRlcm4gPSBcIiMgXCIgKyB0cnVlT2xkRmlsZU5hbWU7XHJcblx0XHRsZXQgcmUgPSBuZXcgUmVnRXhwKHBhdHRlcm4pO1xyXG5cdFx0bGV0IG5ld0ZpbGUgPSBzdHJpbmdGaWxlLnJlcGxhY2UocmUsIFwiIyBcIiArIG5ld1RpdGxlKTtcclxuXHRcdC8vdGhpcy5tb2RpZnlEYXRlKGZpbGUsIHN0cmluZ0ZpbGUpO1xyXG5cdFx0YXdhaXQgZmlsZS52YXVsdC5tb2RpZnkoZmlsZSwgbmV3RmlsZSk7XHJcblx0XHR0aGlzLnN0b3BNdXNhQWN0aW9ucygpO1xyXG5cdH1cclxuXHJcblx0c3RhcnRNdXNhQWN0aW9ucygpIHtcclxuXHRcdHRoaXMuYWN0aW9uSW5Qcm9ncmVzcyA9IHRydWU7XHJcblx0fVxyXG5cdHN0b3BNdXNhQWN0aW9ucygpIHtcclxuXHRcdHRoaXMuYWN0aW9uSW5Qcm9ncmVzcyA9IGZhbHNlO1xyXG5cdH1cclxuXHJcblx0Z2V0RGF0ZSgpIHtcclxuXHRcdGxldCBkYXRlT2JqID0gbmV3IERhdGUoKTtcclxuXHRcdGxldCBkYXlzID0gKFwiMFwiICsgZGF0ZU9iai5nZXREYXRlKCkpLnNsaWNlKC0yKTtcclxuXHRcdGxldCBtb250aCA9IChcIjBcIiArIChkYXRlT2JqLmdldE1vbnRoKCkgKyAxKSkuc2xpY2UoLTIpO1xyXG5cdFx0bGV0IHllYXIgPSBkYXRlT2JqLmdldEZ1bGxZZWFyKCk7XHJcblx0XHRsZXQgaG91cnMgPSBkYXRlT2JqLmdldEhvdXJzKCk7XHJcblx0XHRsZXQgbWludXRlcyA9IGRhdGVPYmouZ2V0TWludXRlcygpO1xyXG5cdFx0bGV0IHNlY29uZHMgPSBkYXRlT2JqLmdldFNlY29uZHMoKTtcclxuXHRcdGxldCBkYXRlID0geWVhciArIFwiLVwiICsgbW9udGggKyBcIi1cIiArIGRheXMgKyBcIiBcIiArIGhvdXJzICsgXCI6XCIgKyBtaW51dGVzICsgXCI6XCIgKyBzZWNvbmRzO1xyXG5cclxuXHRcdHJldHVybiBkYXRlO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgZmlsZU1vZGlmaWVkRXZlbnQoZmlsZTogVEZpbGUpIHtcclxuXHRcdGlmKHRoaXMuYWN0aW9uSW5Qcm9ncmVzcyA9PSB0cnVlKSB7XHJcblx0XHRcdGxvZyhcIkFjdGlvbiBpbiBwcm9ncmVzcywgc2tpcHBpbmdcIik7IFxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9O1xyXG5cdFx0aWYoZmlsZS5wYXRoLmNvbnRhaW5zKFwiMDQgLSBcIikpIHsgXHJcblx0XHRcdGxvZyhcIkZpbGUgaXMgdGVtcGxhdGUsIHNraXBwaW5nIGZpbGVcIik7IFxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9O1xyXG5cclxuXHRcdHRoaXMuc3RhcnRNdXNhQWN0aW9ucygpO1xyXG5cdFx0bGV0IHN0cmluZ0ZpbGUgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5yZWFkKGZpbGUpO1xyXG5cdFx0bGV0IHRydWVGaWxlTmFtZSA9IGZpbGUucGF0aC5zcGxpdChcIi9cIikubGFzdCgpLnNwbGl0KFwiLVwiKS5sYXN0KCkucmVwbGFjZShcIi5tZFwiLCBcIlwiKS50cmltKCk7XHJcblxyXG5cdFx0Ly8gQ29tcGFyZSB0aXRsZSB0byBmaWxlIG5hbWVcclxuXHRcdGxldCBmaWxlVGl0bGUgPSBzdHJpbmdGaWxlLm1hdGNoKCcjezF9IHsxfS4qJykuam9pbihcIlwiKS5zbGljZSgyKTtcclxuXHRcdGlmKHRydWVGaWxlTmFtZSAhPSBmaWxlVGl0bGUpe1xyXG5cdFx0XHRsZXQgdHJ1ZUZpbGVQYXRoID0gZmlsZS5wYXRoO1xyXG5cdFx0XHRsZXQgbmV3RmlsZVBhdGggPSB0cnVlRmlsZVBhdGgucmVwbGFjZSh0cnVlRmlsZU5hbWUsIGZpbGVUaXRsZSk7XHJcblx0XHRcdGxvZyhcIlRpdGxlIGNoYW5nZWQsIHJlbmFtaW5nIGZpbGVcIik7XHJcblx0XHRcdGF3YWl0IHRoaXMuYXBwLmZpbGVNYW5hZ2VyLnJlbmFtZUZpbGUoZmlsZSwgbmV3RmlsZVBhdGgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdFxyXG5cdFx0Ly8gTW9kaWZ5IGRhdGEgaW4gZnJvbnRtYXR0ZXJcclxuXHRcdGxvZyhcIlVwZGF0ZSBtb2RpZmllZCBkYXRlXCIpO1xyXG5cdFx0bGV0IGRhdGUgPSB0aGlzLmdldERhdGUoKTtcclxuXHRcdFxyXG5cdFx0bGV0IG1vZGlmaWVkUyA9IFwibW9kaWZpZWQgZGF0ZTogXCIgKyBkYXRlO1xyXG5cdFx0bGV0IHJlID0gbmV3IFJlZ0V4cCgnKG1vZGlmaWVkIGRhdGUuKiknKTtcclxuXHRcdGxldCBuZXdGaWxlID0gc3RyaW5nRmlsZS5yZXBsYWNlKHJlLCBtb2RpZmllZFMpO1xyXG5cdFx0YXdhaXQgZmlsZS52YXVsdC5tb2RpZnkoZmlsZSwgbmV3RmlsZSk7XHJcblxyXG5cdFx0dGhpcy5zdG9wTXVzYUFjdGlvbnMoKTtcclxuXHR9XHJcbn0iLCAiZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvZyhtc2c6IGFueSkge1xyXG4gICAgY29uc29sZS5sb2coXCJbTUFdIC0gXCIgKyBtc2cpO1xyXG59Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBOEs7OztBQ0E5SyxhQUEwQixLQUFVO0FBQUE7QUFDaEMsWUFBUSxJQUFJLFlBQVk7QUFBQTtBQUFBOzs7QURFNUIseUJBQWtDLHVCQUFPO0FBQUEsRUFLbEMsU0FBUztBQUFBO0FBQ2QsVUFBSTtBQUNKLFdBQUssa0JBQWtCLEtBQUssSUFBSSxNQUFNLEdBQUcsVUFBVSxDQUFDLFNBQWdCLEtBQUssa0JBQWtCO0FBQzNGLFdBQUssc0JBQXNCLEtBQUssSUFBSSxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQWEsWUFBb0IsS0FBSyxnQkFBZ0IsTUFBTTtBQUNwSCxXQUFLLGNBQWMsS0FBSztBQUN4QixXQUFLLGNBQWMsS0FBSztBQUFBO0FBQUE7QUFBQSxFQUd6QixXQUFpQjtBQUNoQixRQUFJO0FBQ0osU0FBSztBQUFBO0FBQUEsRUFHQSxnQkFBZ0IsTUFBYSxTQUFpQjtBQUFBO0FBQ25ELFVBQUcsS0FBSyxvQkFBb0IsTUFBTTtBQUNqQyxZQUFJO0FBQ0o7QUFBQTtBQUNBO0FBQ0QsVUFBSTtBQUNKLFdBQUs7QUFDTCxVQUFJLGFBQWEsTUFBTSxLQUFLLElBQUksTUFBTSxLQUFLO0FBQzNDLFVBQUksV0FBVyxLQUFLLFNBQVMsTUFBTSxLQUFLLE9BQU87QUFDL0MsVUFBSSxrQkFBa0IsUUFBUSxNQUFNLEtBQUssT0FBTyxNQUFNLEtBQUssT0FBTyxRQUFRLE9BQU8sSUFBSTtBQUNyRixVQUFJO0FBQ0osVUFBSSxVQUFVLE9BQU87QUFDckIsVUFBSSxLQUFLLElBQUksT0FBTztBQUNwQixVQUFJLFVBQVUsV0FBVyxRQUFRLElBQUksT0FBTztBQUU1QyxZQUFNLEtBQUssTUFBTSxPQUFPLE1BQU07QUFDOUIsV0FBSztBQUFBO0FBQUE7QUFBQSxFQUdOLG1CQUFtQjtBQUNsQixTQUFLLG1CQUFtQjtBQUFBO0FBQUEsRUFFekIsa0JBQWtCO0FBQ2pCLFNBQUssbUJBQW1CO0FBQUE7QUFBQSxFQUd6QixVQUFVO0FBQ1QsUUFBSSxVQUFVLElBQUk7QUFDbEIsUUFBSSxPQUFRLE9BQU0sUUFBUSxXQUFXLE1BQU07QUFDM0MsUUFBSSxRQUFTLE9BQU8sU0FBUSxhQUFhLElBQUksTUFBTTtBQUNuRCxRQUFJLE9BQU8sUUFBUTtBQUNuQixRQUFJLFFBQVEsUUFBUTtBQUNwQixRQUFJLFVBQVUsUUFBUTtBQUN0QixRQUFJLFVBQVUsUUFBUTtBQUN0QixRQUFJLE9BQU8sT0FBTyxNQUFNLFFBQVEsTUFBTSxPQUFPLE1BQU0sUUFBUSxNQUFNLFVBQVUsTUFBTTtBQUVqRixXQUFPO0FBQUE7QUFBQSxFQUdGLGtCQUFrQixNQUFhO0FBQUE7QUFDcEMsVUFBRyxLQUFLLG9CQUFvQixNQUFNO0FBQ2pDLFlBQUk7QUFDSjtBQUFBO0FBQ0E7QUFDRCxVQUFHLEtBQUssS0FBSyxTQUFTLFVBQVU7QUFDL0IsWUFBSTtBQUNKO0FBQUE7QUFDQTtBQUVELFdBQUs7QUFDTCxVQUFJLGFBQWEsTUFBTSxLQUFLLElBQUksTUFBTSxLQUFLO0FBQzNDLFVBQUksZUFBZSxLQUFLLEtBQUssTUFBTSxLQUFLLE9BQU8sTUFBTSxLQUFLLE9BQU8sUUFBUSxPQUFPLElBQUk7QUFHcEYsVUFBSSxZQUFZLFdBQVcsTUFBTSxjQUFjLEtBQUssSUFBSSxNQUFNO0FBQzlELFVBQUcsZ0JBQWdCLFdBQVU7QUFDNUIsWUFBSSxlQUFlLEtBQUs7QUFDeEIsWUFBSSxjQUFjLGFBQWEsUUFBUSxjQUFjO0FBQ3JELFlBQUk7QUFDSixjQUFNLEtBQUssSUFBSSxZQUFZLFdBQVcsTUFBTTtBQUFBO0FBSzdDLFVBQUk7QUFDSixVQUFJLE9BQU8sS0FBSztBQUVoQixVQUFJLFlBQVksb0JBQW9CO0FBQ3BDLFVBQUksS0FBSyxJQUFJLE9BQU87QUFDcEIsVUFBSSxVQUFVLFdBQVcsUUFBUSxJQUFJO0FBQ3JDLFlBQU0sS0FBSyxNQUFNLE9BQU8sTUFBTTtBQUU5QixXQUFLO0FBQUE7QUFBQTtBQUFBOyIsCiAgIm5hbWVzIjogW10KfQo=
