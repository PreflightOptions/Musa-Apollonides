/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
__export(exports, {
  default: () => Musa
});
var import_obsidian = __toModule(require("obsidian"));

// src/utilities/logger.ts
function log(msg) {
  return __async(this, null, function* () {
    console.log("[MA] - " + msg);
  });
}

// src/main.ts
var Musa = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      log("Musa Apollonides Loaded");
      this.modifyFileEvent = this.app.vault.on("modify", (file) => this.fileModifiedEvent(file));
      this.modifyFileNameEvent = this.app.vault.on("rename", (file, oldPath) => this.fileNameChanged(file, oldPath));
      this.registerEvent(this.modifyFileEvent);
      this.registerEvent(this.modifyFileNameEvent);
    });
  }
  onunload() {
    log("Unloading Musa Apollonides");
    this.unload();
  }
  fileNameChanged(file, oldPath) {
    return __async(this, null, function* () {
      if (this.actionInProgress == true) {
        log("Action in progress, skipping");
        return;
      }
      ;
      this.startMusaActions();
      log("File name changed, renaming title");
      let stringFile = yield this.app.vault.read(file);
      let newTitle = file.basename.split("-").last().trim();
      let trueOldFileName = oldPath.split("/").last().split("-").last().replace(".md", "").trim();
      let pattern = "# " + trueOldFileName;
      let re = new RegExp(pattern);
      let newFile = stringFile.replace(re, "# " + newTitle);
      yield this.updateDate(newFile, file);
      this.stopMusaActions();
    });
  }
  startMusaActions() {
    this.actionInProgress = true;
  }
  stopMusaActions() {
    this.actionInProgress = false;
  }
  getDate() {
    let dateObj = new Date();
    let days = ("0" + dateObj.getDate()).slice(-2);
    let month = ("0" + (dateObj.getMonth() + 1)).slice(-2);
    let year = dateObj.getFullYear();
    let hours = dateObj.getHours();
    let minutes = dateObj.getMinutes();
    let seconds = dateObj.getSeconds();
    let date = year + "-" + month + "-" + days + " " + hours + ":" + minutes + ":" + seconds;
    return date;
  }
  updateDate(stringFile, file) {
    return __async(this, null, function* () {
      log("Update modified date");
      let date = this.getDate();
      let modifiedS = "modified date: " + date;
      let re = new RegExp("(modified date.*)");
      let newFile = stringFile.replace(re, modifiedS);
      yield file.vault.modify(file, newFile);
    });
  }
  fileModifiedEvent(file) {
    return __async(this, null, function* () {
      if (this.actionInProgress == true) {
        log("Action in progress, skipping");
        return;
      }
      ;
      if (file.path.contains("04 - ")) {
        log("File is template, skipping file");
        return;
      }
      ;
      this.startMusaActions();
      let stringFile = yield this.app.vault.read(file);
      let trueFileName = file.path.split("/").last().split("-").last().replace(".md", "").trim();
      let fileTitle = stringFile.match("#{1} {1}.*").join("").slice(2).trim();
      if (trueFileName != fileTitle) {
        let trueFilePath = file.path;
        let newFilePath = trueFilePath.replace(trueFileName, fileTitle);
        log("Title changed, renaming file");
        yield this.app.fileManager.renameFile(file, newFilePath);
      }
      yield this.updateDate(stringFile, file);
      this.stopMusaActions();
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAic3JjL3V0aWxpdGllcy9sb2dnZXIudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IEFwcCwgRWRpdG9yLCBlZGl0b3JFZGl0b3JGaWVsZCwgRXZlbnRSZWYsIE1hcmtkb3duVmlldywgTWV0YWRhdGFDYWNoZSwgTW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nLCBUQWJzdHJhY3RGaWxlLCBURmlsZSwgVEZvbGRlciwgVmF1bHQgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBsb2cgfSBmcm9tIFwidXRpbGl0aWVzL2xvZ2dlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNdXNhIGV4dGVuZHMgUGx1Z2luIHtcblx0cHJpdmF0ZSBtb2RpZnlGaWxlRXZlbnQ6IEV2ZW50UmVmO1xuXHRwcml2YXRlIG1vZGlmeUZpbGVOYW1lRXZlbnQ6IEV2ZW50UmVmO1xuXHRwcml2YXRlIGFjdGlvbkluUHJvZ3Jlc3MgOiBib29sZWFuO1xuXHRcblx0YXN5bmMgb25sb2FkKCkge1xuXHRcdGxvZyhcIk11c2EgQXBvbGxvbmlkZXMgTG9hZGVkXCIpO1xuXHRcdHRoaXMubW9kaWZ5RmlsZUV2ZW50ID0gdGhpcy5hcHAudmF1bHQub24oXCJtb2RpZnlcIiwgKGZpbGU6IFRGaWxlKSA9PiB0aGlzLmZpbGVNb2RpZmllZEV2ZW50KGZpbGUpKTtcblx0XHR0aGlzLm1vZGlmeUZpbGVOYW1lRXZlbnQgPSB0aGlzLmFwcC52YXVsdC5vbihcInJlbmFtZVwiLCAoZmlsZTogVEZpbGUsIG9sZFBhdGg6IHN0cmluZykgPT4gdGhpcy5maWxlTmFtZUNoYW5nZWQoZmlsZSwgb2xkUGF0aCkpO1xuXHRcdHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLm1vZGlmeUZpbGVFdmVudCk7XG5cdFx0dGhpcy5yZWdpc3RlckV2ZW50KHRoaXMubW9kaWZ5RmlsZU5hbWVFdmVudCk7XG5cdFx0XG5cdH1cblx0b251bmxvYWQoKTogdm9pZCB7XG5cdFx0bG9nKFwiVW5sb2FkaW5nIE11c2EgQXBvbGxvbmlkZXNcIik7XG5cdFx0dGhpcy51bmxvYWQoKTtcblx0fVxuXG5cdGFzeW5jIGZpbGVOYW1lQ2hhbmdlZChmaWxlOiBURmlsZSwgb2xkUGF0aDogc3RyaW5nKSB7XG5cdFx0aWYodGhpcy5hY3Rpb25JblByb2dyZXNzID09IHRydWUpIHtcblx0XHRcdGxvZyhcIkFjdGlvbiBpbiBwcm9ncmVzcywgc2tpcHBpbmdcIik7IFxuXHRcdFx0cmV0dXJuO1xuXHRcdH07XG5cdFx0dGhpcy5zdGFydE11c2FBY3Rpb25zKCk7XG5cdFx0bG9nKFwiRmlsZSBuYW1lIGNoYW5nZWQsIHJlbmFtaW5nIHRpdGxlXCIpO1xuXHRcdGxldCBzdHJpbmdGaWxlID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChmaWxlKTtcblx0XHRsZXQgbmV3VGl0bGUgPSBmaWxlLmJhc2VuYW1lLnNwbGl0KFwiLVwiKS5sYXN0KCkudHJpbSgpO1xuXHRcdGxldCB0cnVlT2xkRmlsZU5hbWUgPSBvbGRQYXRoLnNwbGl0KFwiL1wiKS5sYXN0KCkuc3BsaXQoXCItXCIpLmxhc3QoKS5yZXBsYWNlKFwiLm1kXCIsIFwiXCIpLnRyaW0oKTtcblx0XHRsZXQgcGF0dGVybiA9IFwiIyBcIiArIHRydWVPbGRGaWxlTmFtZTtcblx0XHRsZXQgcmUgPSBuZXcgUmVnRXhwKHBhdHRlcm4pO1xuXHRcdGxldCBuZXdGaWxlID0gc3RyaW5nRmlsZS5yZXBsYWNlKHJlLCBcIiMgXCIgKyBuZXdUaXRsZSk7XG5cdFx0YXdhaXQgdGhpcy51cGRhdGVEYXRlKG5ld0ZpbGUsIGZpbGUpO1xuXHRcdC8vYXdhaXQgZmlsZS52YXVsdC5tb2RpZnkoZmlsZSwgbmV3RmlsZSk7XG5cdFx0dGhpcy5zdG9wTXVzYUFjdGlvbnMoKTtcblx0fVxuXG5cdHN0YXJ0TXVzYUFjdGlvbnMoKSB7XG5cdFx0dGhpcy5hY3Rpb25JblByb2dyZXNzID0gdHJ1ZTtcblx0fVxuXHRzdG9wTXVzYUFjdGlvbnMoKSB7XG5cdFx0dGhpcy5hY3Rpb25JblByb2dyZXNzID0gZmFsc2U7XG5cdH1cblxuXHRnZXREYXRlKCkge1xuXHRcdGxldCBkYXRlT2JqID0gbmV3IERhdGUoKTtcblx0XHRsZXQgZGF5cyA9IChcIjBcIiArIGRhdGVPYmouZ2V0RGF0ZSgpKS5zbGljZSgtMik7XG5cdFx0bGV0IG1vbnRoID0gKFwiMFwiICsgKGRhdGVPYmouZ2V0TW9udGgoKSArIDEpKS5zbGljZSgtMik7XG5cdFx0bGV0IHllYXIgPSBkYXRlT2JqLmdldEZ1bGxZZWFyKCk7XG5cdFx0bGV0IGhvdXJzID0gZGF0ZU9iai5nZXRIb3VycygpO1xuXHRcdGxldCBtaW51dGVzID0gZGF0ZU9iai5nZXRNaW51dGVzKCk7XG5cdFx0bGV0IHNlY29uZHMgPSBkYXRlT2JqLmdldFNlY29uZHMoKTtcblx0XHRsZXQgZGF0ZSA9IHllYXIgKyBcIi1cIiArIG1vbnRoICsgXCItXCIgKyBkYXlzICsgXCIgXCIgKyBob3VycyArIFwiOlwiICsgbWludXRlcyArIFwiOlwiICsgc2Vjb25kcztcblxuXHRcdHJldHVybiBkYXRlO1xuXHR9XG5cblx0YXN5bmMgdXBkYXRlRGF0ZShzdHJpbmdGaWxlOiBzdHJpbmcsIGZpbGU6IFRGaWxlKXtcblx0XHQvLyBNb2RpZnkgZGF0YSBpbiBmcm9udG1hdHRlclxuXHRcdGxvZyhcIlVwZGF0ZSBtb2RpZmllZCBkYXRlXCIpO1xuXHRcdGxldCBkYXRlID0gdGhpcy5nZXREYXRlKCk7XG5cdFx0XG5cdFx0bGV0IG1vZGlmaWVkUyA9IFwibW9kaWZpZWQgZGF0ZTogXCIgKyBkYXRlO1xuXHRcdGxldCByZSA9IG5ldyBSZWdFeHAoJyhtb2RpZmllZCBkYXRlLiopJyk7XG5cdFx0bGV0IG5ld0ZpbGUgPSBzdHJpbmdGaWxlLnJlcGxhY2UocmUsIG1vZGlmaWVkUyk7XG5cdFx0YXdhaXQgZmlsZS52YXVsdC5tb2RpZnkoZmlsZSwgbmV3RmlsZSk7XG5cdH1cblxuXHRhc3luYyBmaWxlTW9kaWZpZWRFdmVudChmaWxlOiBURmlsZSkge1xuXHRcdGlmKHRoaXMuYWN0aW9uSW5Qcm9ncmVzcyA9PSB0cnVlKSB7XG5cdFx0XHRsb2coXCJBY3Rpb24gaW4gcHJvZ3Jlc3MsIHNraXBwaW5nXCIpOyBcblx0XHRcdHJldHVybjtcblx0XHR9O1xuXHRcdGlmKGZpbGUucGF0aC5jb250YWlucyhcIjA0IC0gXCIpKSB7IFxuXHRcdFx0bG9nKFwiRmlsZSBpcyB0ZW1wbGF0ZSwgc2tpcHBpbmcgZmlsZVwiKTsgXG5cdFx0XHRyZXR1cm47XG5cdFx0fTtcblxuXHRcdHRoaXMuc3RhcnRNdXNhQWN0aW9ucygpO1xuXHRcdGxldCBzdHJpbmdGaWxlID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChmaWxlKTtcblx0XHRsZXQgdHJ1ZUZpbGVOYW1lID0gZmlsZS5wYXRoLnNwbGl0KFwiL1wiKS5sYXN0KCkuc3BsaXQoXCItXCIpLmxhc3QoKS5yZXBsYWNlKFwiLm1kXCIsIFwiXCIpLnRyaW0oKTtcblxuXHRcdC8vIENvbXBhcmUgdGl0bGUgdG8gZmlsZSBuYW1lXG5cdFx0bGV0IGZpbGVUaXRsZSA9IHN0cmluZ0ZpbGUubWF0Y2goJyN7MX0gezF9LionKS5qb2luKFwiXCIpLnNsaWNlKDIpLnRyaW0oKTtcblx0XHRpZih0cnVlRmlsZU5hbWUgIT0gZmlsZVRpdGxlKXtcblx0XHRcdGxldCB0cnVlRmlsZVBhdGggPSBmaWxlLnBhdGg7XG5cdFx0XHRsZXQgbmV3RmlsZVBhdGggPSB0cnVlRmlsZVBhdGgucmVwbGFjZSh0cnVlRmlsZU5hbWUsIGZpbGVUaXRsZSk7XG5cdFx0XHRsb2coXCJUaXRsZSBjaGFuZ2VkLCByZW5hbWluZyBmaWxlXCIpO1xuXHRcdFx0YXdhaXQgdGhpcy5hcHAuZmlsZU1hbmFnZXIucmVuYW1lRmlsZShmaWxlLCBuZXdGaWxlUGF0aCk7XG5cdFx0fVxuXHRcdGF3YWl0IHRoaXMudXBkYXRlRGF0ZShzdHJpbmdGaWxlLCBmaWxlKVxuXHRcdHRoaXMuc3RvcE11c2FBY3Rpb25zKCk7XG5cdH1cblxuXG59IiwgImV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2cobXNnOiBhbnkpIHtcbiAgICBjb25zb2xlLmxvZyhcIltNQV0gLSBcIiArIG1zZyk7XG59Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBOEs7OztBQ0E5SyxhQUEwQixLQUFVO0FBQUE7QUFDaEMsWUFBUSxJQUFJLFlBQVk7QUFBQTtBQUFBOzs7QURFNUIseUJBQWtDLHVCQUFPO0FBQUEsRUFLbEMsU0FBUztBQUFBO0FBQ2QsVUFBSTtBQUNKLFdBQUssa0JBQWtCLEtBQUssSUFBSSxNQUFNLEdBQUcsVUFBVSxDQUFDLFNBQWdCLEtBQUssa0JBQWtCO0FBQzNGLFdBQUssc0JBQXNCLEtBQUssSUFBSSxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQWEsWUFBb0IsS0FBSyxnQkFBZ0IsTUFBTTtBQUNwSCxXQUFLLGNBQWMsS0FBSztBQUN4QixXQUFLLGNBQWMsS0FBSztBQUFBO0FBQUE7QUFBQSxFQUd6QixXQUFpQjtBQUNoQixRQUFJO0FBQ0osU0FBSztBQUFBO0FBQUEsRUFHQSxnQkFBZ0IsTUFBYSxTQUFpQjtBQUFBO0FBQ25ELFVBQUcsS0FBSyxvQkFBb0IsTUFBTTtBQUNqQyxZQUFJO0FBQ0o7QUFBQTtBQUNBO0FBQ0QsV0FBSztBQUNMLFVBQUk7QUFDSixVQUFJLGFBQWEsTUFBTSxLQUFLLElBQUksTUFBTSxLQUFLO0FBQzNDLFVBQUksV0FBVyxLQUFLLFNBQVMsTUFBTSxLQUFLLE9BQU87QUFDL0MsVUFBSSxrQkFBa0IsUUFBUSxNQUFNLEtBQUssT0FBTyxNQUFNLEtBQUssT0FBTyxRQUFRLE9BQU8sSUFBSTtBQUNyRixVQUFJLFVBQVUsT0FBTztBQUNyQixVQUFJLEtBQUssSUFBSSxPQUFPO0FBQ3BCLFVBQUksVUFBVSxXQUFXLFFBQVEsSUFBSSxPQUFPO0FBQzVDLFlBQU0sS0FBSyxXQUFXLFNBQVM7QUFFL0IsV0FBSztBQUFBO0FBQUE7QUFBQSxFQUdOLG1CQUFtQjtBQUNsQixTQUFLLG1CQUFtQjtBQUFBO0FBQUEsRUFFekIsa0JBQWtCO0FBQ2pCLFNBQUssbUJBQW1CO0FBQUE7QUFBQSxFQUd6QixVQUFVO0FBQ1QsUUFBSSxVQUFVLElBQUk7QUFDbEIsUUFBSSxPQUFRLE9BQU0sUUFBUSxXQUFXLE1BQU07QUFDM0MsUUFBSSxRQUFTLE9BQU8sU0FBUSxhQUFhLElBQUksTUFBTTtBQUNuRCxRQUFJLE9BQU8sUUFBUTtBQUNuQixRQUFJLFFBQVEsUUFBUTtBQUNwQixRQUFJLFVBQVUsUUFBUTtBQUN0QixRQUFJLFVBQVUsUUFBUTtBQUN0QixRQUFJLE9BQU8sT0FBTyxNQUFNLFFBQVEsTUFBTSxPQUFPLE1BQU0sUUFBUSxNQUFNLFVBQVUsTUFBTTtBQUVqRixXQUFPO0FBQUE7QUFBQSxFQUdGLFdBQVcsWUFBb0IsTUFBWTtBQUFBO0FBRWhELFVBQUk7QUFDSixVQUFJLE9BQU8sS0FBSztBQUVoQixVQUFJLFlBQVksb0JBQW9CO0FBQ3BDLFVBQUksS0FBSyxJQUFJLE9BQU87QUFDcEIsVUFBSSxVQUFVLFdBQVcsUUFBUSxJQUFJO0FBQ3JDLFlBQU0sS0FBSyxNQUFNLE9BQU8sTUFBTTtBQUFBO0FBQUE7QUFBQSxFQUd6QixrQkFBa0IsTUFBYTtBQUFBO0FBQ3BDLFVBQUcsS0FBSyxvQkFBb0IsTUFBTTtBQUNqQyxZQUFJO0FBQ0o7QUFBQTtBQUNBO0FBQ0QsVUFBRyxLQUFLLEtBQUssU0FBUyxVQUFVO0FBQy9CLFlBQUk7QUFDSjtBQUFBO0FBQ0E7QUFFRCxXQUFLO0FBQ0wsVUFBSSxhQUFhLE1BQU0sS0FBSyxJQUFJLE1BQU0sS0FBSztBQUMzQyxVQUFJLGVBQWUsS0FBSyxLQUFLLE1BQU0sS0FBSyxPQUFPLE1BQU0sS0FBSyxPQUFPLFFBQVEsT0FBTyxJQUFJO0FBR3BGLFVBQUksWUFBWSxXQUFXLE1BQU0sY0FBYyxLQUFLLElBQUksTUFBTSxHQUFHO0FBQ2pFLFVBQUcsZ0JBQWdCLFdBQVU7QUFDNUIsWUFBSSxlQUFlLEtBQUs7QUFDeEIsWUFBSSxjQUFjLGFBQWEsUUFBUSxjQUFjO0FBQ3JELFlBQUk7QUFDSixjQUFNLEtBQUssSUFBSSxZQUFZLFdBQVcsTUFBTTtBQUFBO0FBRTdDLFlBQU0sS0FBSyxXQUFXLFlBQVk7QUFDbEMsV0FBSztBQUFBO0FBQUE7QUFBQTsiLAogICJuYW1lcyI6IFtdCn0K
