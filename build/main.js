/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
__export(exports, {
  default: () => Musa
});
var import_obsidian = __toModule(require("obsidian"));

// src/utilities/logger.ts
function log(msg) {
  return __async(this, null, function* () {
    console.log("[MA] - " + msg);
  });
}

// src/main.ts
var Musa = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      log("Musa Apollonides Loaded");
      this.modifyFileEvent = this.app.vault.on("modify", (file) => this.fileModifiedEvent(file));
      this.modifyFileNameEvent = this.app.vault.on("rename", (file, oldPath) => this.fileNameChanged(file, oldPath));
      this.registerEvent(this.modifyFileEvent);
      this.registerEvent(this.modifyFileNameEvent);
    });
  }
  onunload() {
    log("Unloading Musa Apollonides");
    this.unload();
  }
  fileNameChanged(file, oldPath) {
    return __async(this, null, function* () {
      if (this.actionInProgress == true) {
        log("Action in progress, skipping");
        return;
      }
      ;
      log("File name changed, renaming title");
      this.startMusaActions();
      let stringFile = yield this.app.vault.read(file);
      let newTitle = file.basename.split("-").last().trim();
      let trueOldFileName = oldPath.split("/").last().split("-").last().replace(".md", "").trim();
      let pattern = "# " + trueOldFileName;
      let re = new RegExp(pattern);
      let newFile = stringFile.replace(re, "# " + newTitle);
      yield file.vault.modify(file, newFile);
      this.stopMusaActions();
    });
  }
  startMusaActions() {
    this.actionInProgress = true;
  }
  stopMusaActions() {
    this.actionInProgress = false;
  }
  getDate() {
    let dateObj = new Date();
    let days = ("0" + dateObj.getDate()).slice(-2);
    let month = ("0" + (dateObj.getMonth() + 1)).slice(-2);
    let year = dateObj.getFullYear();
    let hours = dateObj.getHours();
    let minutes = dateObj.getMinutes();
    let seconds = dateObj.getSeconds();
    let date = year + "-" + month + "-" + days + " " + hours + ":" + minutes + ":" + seconds;
    return date;
  }
  fileModifiedEvent(file) {
    return __async(this, null, function* () {
      if (this.actionInProgress == true) {
        log("Action in progress, skipping");
        return;
      }
      ;
      if (file.path.contains("04 - ")) {
        log("File is template, skipping file");
        return;
      }
      ;
      this.startMusaActions();
      let stringFile = yield this.app.vault.read(file);
      let trueFileName = file.path.split("/").last().split("-").last().replace(".md", "").trim();
      let fileTitle = stringFile.match("#{1} {1}.*").join("").slice(2).trim();
      if (trueFileName != fileTitle) {
        let trueFilePath = file.path;
        let newFilePath = trueFilePath.replace(trueFileName, fileTitle);
        log("Title changed, renaming file");
        yield this.app.fileManager.renameFile(file, newFilePath);
      }
      log("Update modified date");
      let date = this.getDate();
      let modifiedS = "modified date: " + date;
      let re = new RegExp("(modified date.*)");
      let newFile = stringFile.replace(re, modifiedS);
      yield file.vault.modify(file, newFile);
      this.stopMusaActions();
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAic3JjL3V0aWxpdGllcy9sb2dnZXIudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IEFwcCwgRWRpdG9yLCBlZGl0b3JFZGl0b3JGaWVsZCwgRXZlbnRSZWYsIE1hcmtkb3duVmlldywgTWV0YWRhdGFDYWNoZSwgTW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nLCBUQWJzdHJhY3RGaWxlLCBURmlsZSwgVEZvbGRlciwgVmF1bHQgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IGxvZyB9IGZyb20gXCJ1dGlsaXRpZXMvbG9nZ2VyXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNdXNhIGV4dGVuZHMgUGx1Z2luIHtcclxuXHRwcml2YXRlIG1vZGlmeUZpbGVFdmVudDogRXZlbnRSZWY7XHJcblx0cHJpdmF0ZSBtb2RpZnlGaWxlTmFtZUV2ZW50OiBFdmVudFJlZjtcclxuXHRwcml2YXRlIGFjdGlvbkluUHJvZ3Jlc3MgOiBib29sZWFuO1xyXG5cdFxyXG5cdGFzeW5jIG9ubG9hZCgpIHtcclxuXHRcdGxvZyhcIk11c2EgQXBvbGxvbmlkZXMgTG9hZGVkXCIpO1xyXG5cdFx0dGhpcy5tb2RpZnlGaWxlRXZlbnQgPSB0aGlzLmFwcC52YXVsdC5vbihcIm1vZGlmeVwiLCAoZmlsZTogVEZpbGUpID0+IHRoaXMuZmlsZU1vZGlmaWVkRXZlbnQoZmlsZSkpO1xyXG5cdFx0dGhpcy5tb2RpZnlGaWxlTmFtZUV2ZW50ID0gdGhpcy5hcHAudmF1bHQub24oXCJyZW5hbWVcIiwgKGZpbGU6IFRGaWxlLCBvbGRQYXRoOiBzdHJpbmcpID0+IHRoaXMuZmlsZU5hbWVDaGFuZ2VkKGZpbGUsIG9sZFBhdGgpKTtcclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLm1vZGlmeUZpbGVFdmVudCk7XHJcblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQodGhpcy5tb2RpZnlGaWxlTmFtZUV2ZW50KTtcclxuXHRcdFxyXG5cdH1cclxuXHRvbnVubG9hZCgpOiB2b2lkIHtcclxuXHRcdGxvZyhcIlVubG9hZGluZyBNdXNhIEFwb2xsb25pZGVzXCIpO1xyXG5cdFx0dGhpcy51bmxvYWQoKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIGZpbGVOYW1lQ2hhbmdlZChmaWxlOiBURmlsZSwgb2xkUGF0aDogc3RyaW5nKSB7XHJcblx0XHRpZih0aGlzLmFjdGlvbkluUHJvZ3Jlc3MgPT0gdHJ1ZSkge1xyXG5cdFx0XHRsb2coXCJBY3Rpb24gaW4gcHJvZ3Jlc3MsIHNraXBwaW5nXCIpOyBcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fTtcclxuXHRcdGxvZyhcIkZpbGUgbmFtZSBjaGFuZ2VkLCByZW5hbWluZyB0aXRsZVwiKTtcclxuXHRcdHRoaXMuc3RhcnRNdXNhQWN0aW9ucygpO1xyXG5cdFx0bGV0IHN0cmluZ0ZpbGUgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5yZWFkKGZpbGUpO1xyXG5cdFx0bGV0IG5ld1RpdGxlID0gZmlsZS5iYXNlbmFtZS5zcGxpdChcIi1cIikubGFzdCgpLnRyaW0oKTtcclxuXHRcdGxldCB0cnVlT2xkRmlsZU5hbWUgPSBvbGRQYXRoLnNwbGl0KFwiL1wiKS5sYXN0KCkuc3BsaXQoXCItXCIpLmxhc3QoKS5yZXBsYWNlKFwiLm1kXCIsIFwiXCIpLnRyaW0oKTtcclxuXHRcdGxldCBwYXR0ZXJuID0gXCIjIFwiICsgdHJ1ZU9sZEZpbGVOYW1lO1xyXG5cdFx0bGV0IHJlID0gbmV3IFJlZ0V4cChwYXR0ZXJuKTtcclxuXHRcdGxldCBuZXdGaWxlID0gc3RyaW5nRmlsZS5yZXBsYWNlKHJlLCBcIiMgXCIgKyBuZXdUaXRsZSk7XHJcblx0XHQvL3RoaXMubW9kaWZ5RGF0ZShmaWxlLCBzdHJpbmdGaWxlKTtcclxuXHRcdGF3YWl0IGZpbGUudmF1bHQubW9kaWZ5KGZpbGUsIG5ld0ZpbGUpO1xyXG5cdFx0dGhpcy5zdG9wTXVzYUFjdGlvbnMoKTtcclxuXHR9XHJcblxyXG5cdHN0YXJ0TXVzYUFjdGlvbnMoKSB7XHJcblx0XHR0aGlzLmFjdGlvbkluUHJvZ3Jlc3MgPSB0cnVlO1xyXG5cdH1cclxuXHRzdG9wTXVzYUFjdGlvbnMoKSB7XHJcblx0XHR0aGlzLmFjdGlvbkluUHJvZ3Jlc3MgPSBmYWxzZTtcclxuXHR9XHJcblxyXG5cdGdldERhdGUoKSB7XHJcblx0XHRsZXQgZGF0ZU9iaiA9IG5ldyBEYXRlKCk7XHJcblx0XHRsZXQgZGF5cyA9IChcIjBcIiArIGRhdGVPYmouZ2V0RGF0ZSgpKS5zbGljZSgtMik7XHJcblx0XHRsZXQgbW9udGggPSAoXCIwXCIgKyAoZGF0ZU9iai5nZXRNb250aCgpICsgMSkpLnNsaWNlKC0yKTtcclxuXHRcdGxldCB5ZWFyID0gZGF0ZU9iai5nZXRGdWxsWWVhcigpO1xyXG5cdFx0bGV0IGhvdXJzID0gZGF0ZU9iai5nZXRIb3VycygpO1xyXG5cdFx0bGV0IG1pbnV0ZXMgPSBkYXRlT2JqLmdldE1pbnV0ZXMoKTtcclxuXHRcdGxldCBzZWNvbmRzID0gZGF0ZU9iai5nZXRTZWNvbmRzKCk7XHJcblx0XHRsZXQgZGF0ZSA9IHllYXIgKyBcIi1cIiArIG1vbnRoICsgXCItXCIgKyBkYXlzICsgXCIgXCIgKyBob3VycyArIFwiOlwiICsgbWludXRlcyArIFwiOlwiICsgc2Vjb25kcztcclxuXHJcblx0XHRyZXR1cm4gZGF0ZTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIGZpbGVNb2RpZmllZEV2ZW50KGZpbGU6IFRGaWxlKSB7XHJcblx0XHRpZih0aGlzLmFjdGlvbkluUHJvZ3Jlc3MgPT0gdHJ1ZSkge1xyXG5cdFx0XHRsb2coXCJBY3Rpb24gaW4gcHJvZ3Jlc3MsIHNraXBwaW5nXCIpOyBcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fTtcclxuXHRcdGlmKGZpbGUucGF0aC5jb250YWlucyhcIjA0IC0gXCIpKSB7IFxyXG5cdFx0XHRsb2coXCJGaWxlIGlzIHRlbXBsYXRlLCBza2lwcGluZyBmaWxlXCIpOyBcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fTtcclxuXHJcblx0XHR0aGlzLnN0YXJ0TXVzYUFjdGlvbnMoKTtcclxuXHRcdGxldCBzdHJpbmdGaWxlID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChmaWxlKTtcclxuXHRcdGxldCB0cnVlRmlsZU5hbWUgPSBmaWxlLnBhdGguc3BsaXQoXCIvXCIpLmxhc3QoKS5zcGxpdChcIi1cIikubGFzdCgpLnJlcGxhY2UoXCIubWRcIiwgXCJcIikudHJpbSgpO1xyXG5cclxuXHRcdC8vIENvbXBhcmUgdGl0bGUgdG8gZmlsZSBuYW1lXHJcblx0XHRsZXQgZmlsZVRpdGxlID0gc3RyaW5nRmlsZS5tYXRjaCgnI3sxfSB7MX0uKicpLmpvaW4oXCJcIikuc2xpY2UoMikudHJpbSgpO1xyXG5cdFx0aWYodHJ1ZUZpbGVOYW1lICE9IGZpbGVUaXRsZSl7XHJcblx0XHRcdGxldCB0cnVlRmlsZVBhdGggPSBmaWxlLnBhdGg7XHJcblx0XHRcdGxldCBuZXdGaWxlUGF0aCA9IHRydWVGaWxlUGF0aC5yZXBsYWNlKHRydWVGaWxlTmFtZSwgZmlsZVRpdGxlKTtcclxuXHRcdFx0bG9nKFwiVGl0bGUgY2hhbmdlZCwgcmVuYW1pbmcgZmlsZVwiKTtcclxuXHRcdFx0YXdhaXQgdGhpcy5hcHAuZmlsZU1hbmFnZXIucmVuYW1lRmlsZShmaWxlLCBuZXdGaWxlUGF0aCk7XHJcblx0XHR9XHJcblxyXG5cdFx0XHJcblx0XHQvLyBNb2RpZnkgZGF0YSBpbiBmcm9udG1hdHRlclxyXG5cdFx0bG9nKFwiVXBkYXRlIG1vZGlmaWVkIGRhdGVcIik7XHJcblx0XHRsZXQgZGF0ZSA9IHRoaXMuZ2V0RGF0ZSgpO1xyXG5cdFx0XHJcblx0XHRsZXQgbW9kaWZpZWRTID0gXCJtb2RpZmllZCBkYXRlOiBcIiArIGRhdGU7XHJcblx0XHRsZXQgcmUgPSBuZXcgUmVnRXhwKCcobW9kaWZpZWQgZGF0ZS4qKScpO1xyXG5cdFx0bGV0IG5ld0ZpbGUgPSBzdHJpbmdGaWxlLnJlcGxhY2UocmUsIG1vZGlmaWVkUyk7XHJcblx0XHRhd2FpdCBmaWxlLnZhdWx0Lm1vZGlmeShmaWxlLCBuZXdGaWxlKTtcclxuXHJcblx0XHR0aGlzLnN0b3BNdXNhQWN0aW9ucygpO1xyXG5cdH1cclxufSIsICJleHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9nKG1zZzogYW55KSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIltNQV0gLSBcIiArIG1zZyk7XHJcbn0iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUE4Szs7O0FDQTlLLGFBQTBCLEtBQVU7QUFBQTtBQUNoQyxZQUFRLElBQUksWUFBWTtBQUFBO0FBQUE7OztBREU1Qix5QkFBa0MsdUJBQU87QUFBQSxFQUtsQyxTQUFTO0FBQUE7QUFDZCxVQUFJO0FBQ0osV0FBSyxrQkFBa0IsS0FBSyxJQUFJLE1BQU0sR0FBRyxVQUFVLENBQUMsU0FBZ0IsS0FBSyxrQkFBa0I7QUFDM0YsV0FBSyxzQkFBc0IsS0FBSyxJQUFJLE1BQU0sR0FBRyxVQUFVLENBQUMsTUFBYSxZQUFvQixLQUFLLGdCQUFnQixNQUFNO0FBQ3BILFdBQUssY0FBYyxLQUFLO0FBQ3hCLFdBQUssY0FBYyxLQUFLO0FBQUE7QUFBQTtBQUFBLEVBR3pCLFdBQWlCO0FBQ2hCLFFBQUk7QUFDSixTQUFLO0FBQUE7QUFBQSxFQUdBLGdCQUFnQixNQUFhLFNBQWlCO0FBQUE7QUFDbkQsVUFBRyxLQUFLLG9CQUFvQixNQUFNO0FBQ2pDLFlBQUk7QUFDSjtBQUFBO0FBQ0E7QUFDRCxVQUFJO0FBQ0osV0FBSztBQUNMLFVBQUksYUFBYSxNQUFNLEtBQUssSUFBSSxNQUFNLEtBQUs7QUFDM0MsVUFBSSxXQUFXLEtBQUssU0FBUyxNQUFNLEtBQUssT0FBTztBQUMvQyxVQUFJLGtCQUFrQixRQUFRLE1BQU0sS0FBSyxPQUFPLE1BQU0sS0FBSyxPQUFPLFFBQVEsT0FBTyxJQUFJO0FBQ3JGLFVBQUksVUFBVSxPQUFPO0FBQ3JCLFVBQUksS0FBSyxJQUFJLE9BQU87QUFDcEIsVUFBSSxVQUFVLFdBQVcsUUFBUSxJQUFJLE9BQU87QUFFNUMsWUFBTSxLQUFLLE1BQU0sT0FBTyxNQUFNO0FBQzlCLFdBQUs7QUFBQTtBQUFBO0FBQUEsRUFHTixtQkFBbUI7QUFDbEIsU0FBSyxtQkFBbUI7QUFBQTtBQUFBLEVBRXpCLGtCQUFrQjtBQUNqQixTQUFLLG1CQUFtQjtBQUFBO0FBQUEsRUFHekIsVUFBVTtBQUNULFFBQUksVUFBVSxJQUFJO0FBQ2xCLFFBQUksT0FBUSxPQUFNLFFBQVEsV0FBVyxNQUFNO0FBQzNDLFFBQUksUUFBUyxPQUFPLFNBQVEsYUFBYSxJQUFJLE1BQU07QUFDbkQsUUFBSSxPQUFPLFFBQVE7QUFDbkIsUUFBSSxRQUFRLFFBQVE7QUFDcEIsUUFBSSxVQUFVLFFBQVE7QUFDdEIsUUFBSSxVQUFVLFFBQVE7QUFDdEIsUUFBSSxPQUFPLE9BQU8sTUFBTSxRQUFRLE1BQU0sT0FBTyxNQUFNLFFBQVEsTUFBTSxVQUFVLE1BQU07QUFFakYsV0FBTztBQUFBO0FBQUEsRUFHRixrQkFBa0IsTUFBYTtBQUFBO0FBQ3BDLFVBQUcsS0FBSyxvQkFBb0IsTUFBTTtBQUNqQyxZQUFJO0FBQ0o7QUFBQTtBQUNBO0FBQ0QsVUFBRyxLQUFLLEtBQUssU0FBUyxVQUFVO0FBQy9CLFlBQUk7QUFDSjtBQUFBO0FBQ0E7QUFFRCxXQUFLO0FBQ0wsVUFBSSxhQUFhLE1BQU0sS0FBSyxJQUFJLE1BQU0sS0FBSztBQUMzQyxVQUFJLGVBQWUsS0FBSyxLQUFLLE1BQU0sS0FBSyxPQUFPLE1BQU0sS0FBSyxPQUFPLFFBQVEsT0FBTyxJQUFJO0FBR3BGLFVBQUksWUFBWSxXQUFXLE1BQU0sY0FBYyxLQUFLLElBQUksTUFBTSxHQUFHO0FBQ2pFLFVBQUcsZ0JBQWdCLFdBQVU7QUFDNUIsWUFBSSxlQUFlLEtBQUs7QUFDeEIsWUFBSSxjQUFjLGFBQWEsUUFBUSxjQUFjO0FBQ3JELFlBQUk7QUFDSixjQUFNLEtBQUssSUFBSSxZQUFZLFdBQVcsTUFBTTtBQUFBO0FBSzdDLFVBQUk7QUFDSixVQUFJLE9BQU8sS0FBSztBQUVoQixVQUFJLFlBQVksb0JBQW9CO0FBQ3BDLFVBQUksS0FBSyxJQUFJLE9BQU87QUFDcEIsVUFBSSxVQUFVLFdBQVcsUUFBUSxJQUFJO0FBQ3JDLFlBQU0sS0FBSyxNQUFNLE9BQU8sTUFBTTtBQUU5QixXQUFLO0FBQUE7QUFBQTtBQUFBOyIsCiAgIm5hbWVzIjogW10KfQo=
